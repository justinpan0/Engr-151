function ObstacleGrid = placeObstacles
    
    Grid = input('Grid: ');
    Obstacles = input('Obstacles: ');
    ObstacleTypes = input('Types: ', 's');
    
    len = length(Grid);
    [rows, columns] = size(Obstacles);
    if columns ~= 3
        disp('Error: Invalid Obstacle Input!')
    else
        ObstacleGrid = Grid;
        for index = 1:1:rows
            type = ObstacleTypes(index); % Type of the shape
            x = Obstacles(index,1); % The x coordinate of initial point
            y = Obstacles(index,2); % The y coordinate of initial point
            s = Obstacles(index,3); % The size of the shape

            if type == 's'
                % If print square
                n = x+s;
                m = y+s;
                % Print the top half of the diamond
                if n > len
                    % First, the intial point is always in the bound!
                    % If the row or column out of maximum, then just print to 
                    % the bound
                    n = len+1;
                end
                if m > len
                    % Vice versa
                    m = len+1;
                end
                for j = x:1:n-1
                    ObstacleGrid(j,y:1:m-1) = 1;
                end

            elseif type == 'd'
                % If print diamond
                k = x + s - 1;
                n = 0;
                if k > len
                    % If row is out of maximum, then just print to the bound
                    k = len;
                end

                for j = x:1:k
                    init = y - n;
                    term = y + n;
                    if init < 1
                        % If column is out of minimum, then start printing at 1
                        init = 1;
                    end
                    if term > len
                        % If column is out of maximum, then just print to the
                        % bound
                        term = len;
                    end
                    ObstacleGrid(j,init:1:term) = 1;
                    n = n + 1;
                end

                % Print the lower half of the diamond
                if k + s - 2 > len
                    % If the row or column out of maximum, then just print to 
                    % the bound
                    k = len - s + 2;
                end

                n = n - 1; % Cancel the increament in the last loop 
                for j = k:1:k+s-1
                    init = y - n;
                    term = y + n;
                    if init < 1
                        % If column is out of minimum, then start printing at 1
                        init = 1;
                    end
                    if term > len
                        % If column is out of maximum, then just print to the
                        % bound
                        term = len;
                    end
                    n = n - 1;
                    ObstacleGrid(j,init:1:term) = 1;
                end
            end
        end
    end
